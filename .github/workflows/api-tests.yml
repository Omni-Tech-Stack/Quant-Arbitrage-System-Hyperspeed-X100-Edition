name: API Tests

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'
      - '.github/workflows/api-tests.yml'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'backend/**'

jobs:
  test:
    name: Run API Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd backend
          npm ci
      
      - name: Run comprehensive tests
        run: |
          cd backend
          npm test
        env:
          API_BASE_URL: http://localhost:3001
      
      - name: Upload test results
        if: always()
      - uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-1760680760093.json
          path: backend/test-results/unit-test-results-1760680760093.json
          retention-days: 30
      
      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report-node-${{ matrix.node-version }}
          path: backend/test-results/TEST-REPORT.md
          retention-days: 30
      
      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const reportPath = 'backend/test-results/TEST-REPORT.md';
              if (fs.existsSync(reportPath)) {
                const report = fs.readFileSync(reportPath, 'utf8');
                const nodeVersion = '${{ matrix.node-version }}';
                
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## API Test Results (Node ${nodeVersion})\n\n${report}`
                });
              }
            } catch (error) {
              console.error('Error posting comment:', error);
            }
      
      - name: Check test results
        if: always()
        run: |
          cd backend/test-results
          if [ -f comprehensive-report.json ]; then
            # Parse JSON and check for failures
            FAILED=$(cat comprehensive-report.json | grep -o '"allPassed":[^,}]*' | cut -d':' -f2)
            if [ "$FAILED" = "false" ]; then
              echo "❌ Tests failed!"
              exit 1
            else
              echo "✅ All tests passed!"
            fi
          else
            echo "❌ Test results not found!"
            exit 1
          fi

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: all-test-results
      
      - name: Display summary
        run: |
          echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results by Node Version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for dir in all-test-results/test-results-node-*; do
            if [ -d "$dir" ]; then
              NODE_VERSION=$(basename "$dir" | sed 's/test-results-node-//')
              echo "### Node $NODE_VERSION" >> $GITHUB_STEP_SUMMARY
              
              if [ -f "$dir/comprehensive-report.json" ]; then
                # Extract summary information
                TOTAL=$(cat "$dir/comprehensive-report.json" | grep -o '"total":[0-9]*' | head -1 | cut -d':' -f2)
                PASSED=$(cat "$dir/comprehensive-report.json" | grep -o '"passed":[0-9]*' | head -1 | cut -d':' -f2)
                FAILED=$(cat "$dir/comprehensive-report.json" | grep -o '"failed":[0-9]*' | head -1 | cut -d':' -f2)
                
                echo "- Total: $TOTAL" >> $GITHUB_STEP_SUMMARY
                echo "- Passed: $PASSED ✅" >> $GITHUB_STEP_SUMMARY
                echo "- Failed: $FAILED ❌" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done

  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      
      - name: Install dependencies
        run: |
          cd backend
          npm ci
      
      - name: Run performance benchmark
        run: |
          cd backend
          npm test 2>&1 | tee performance.log
      
      - name: Extract performance metrics
        run: |
          cd backend
          echo "# Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Execution Times" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract durations from test output
          grep -o "Duration.*ms" performance.log | head -10 >> $GITHUB_STEP_SUMMARY || true
