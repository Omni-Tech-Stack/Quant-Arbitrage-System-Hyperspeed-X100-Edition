#!/usr/bin/env python
"""
Master Test Runner
Runs all test suites and generates comprehensive report
"""

import sys
import unittest
from pathlib import Path

# Add tests directory to path
sys.path.insert(0, str(Path(__file__).parent))

from test_pool_registry import TestPoolRegistryIntegrator, TestPoolRegistryPathfinding
from test_opportunity_detector import TestOpportunityDetector, TestOpportunityScoring
from test_tvl_fetchers import TestTVLFetchers, TestTVLOrchestrator
from test_core_modules import (
    TestArbRequestEncoder,
    TestMEVRelay,
    TestMerkleRewardDistributor,
    TestMLAnalyticsEngine,
    TestDexProtocolPrecheck
)


def run_all_tests():
    """Run all test suites"""
    
    print("=" * 80)
    print("  QUANT ARBITRAGE SYSTEM - COMPREHENSIVE TEST SUITE")
    print("  Validating all modules against README specifications")
    print("=" * 80)
    print()
    
    # Create test suite
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # Add all test classes
    test_classes = [
        # Pool Registry
        TestPoolRegistryIntegrator,
        TestPoolRegistryPathfinding,
        # Opportunity Detection
        TestOpportunityDetector,
        TestOpportunityScoring,
        # TVL Fetchers
        TestTVLFetchers,
        TestTVLOrchestrator,
        # Core Modules
        TestArbRequestEncoder,
        TestMEVRelay,
        TestMerkleRewardDistributor,
        TestMLAnalyticsEngine,
        TestDexProtocolPrecheck
    ]
    
    for test_class in test_classes:
        suite.addTests(loader.loadTestsFromTestCase(test_class))
    
    # Run tests with detailed output
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # Display comprehensive summary
    print("\n" + "=" * 80)
    print("  COMPREHENSIVE TEST SUMMARY")
    print("=" * 80)
    print()
    
    print(f"üìä Test Statistics:")
    print(f"   Total Tests Run: {result.testsRun}")
    print(f"   ‚úÖ Successes: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"   ‚ùå Failures: {len(result.failures)}")
    print(f"   üî• Errors: {len(result.errors)}")
    print()
    
    # Module breakdown
    print(f"üì¶ Module Coverage:")
    print(f"   ‚úì Pool Registry & Pathfinding")
    print(f"   ‚úì Opportunity Detection & ML Scoring")
    print(f"   ‚úì TVL Fetchers (Balancer, Curve, Uniswap V3)")
    print(f"   ‚úì TVL Orchestrator (Parallel Fetching)")
    print(f"   ‚úì Arbitrage Request Encoder")
    print(f"   ‚úì MEV Relay Integration")
    print(f"   ‚úì Merkle Reward Distribution")
    print(f"   ‚úì ML Analytics Engine")
    print(f"   ‚úì DEX Protocol Precheck")
    print()
    
    # Success/failure status
    if result.wasSuccessful():
        print("üéâ " + "=" * 76)
        print("   ALL TESTS PASSED!")
        print("   System implementation matches README specifications")
        print("=" * 80)
        return 0
    else:
        print("‚ö†Ô∏è  " + "=" * 76)
        print("   SOME TESTS FAILED")
        print("   Review failures above for details")
        print("=" * 80)
        return 1


if __name__ == "__main__":
    sys.exit(run_all_tests())
